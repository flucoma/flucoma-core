#include "Signals.hpp"
#include <AudioFile/IAudioFile.h>
#include <data/FluidTensor.hpp>
#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <vector>

namespace fluid {
namespace testsignals {

constexpr size_t fs = 44100;

const std::string audio_path("@FLUCOMA_CORE_AUDIO@"); 

FluidTensor<double, 1> mono(const FluidTensor<double, 2>& x)
{
  FluidTensor<double, 1> monoInput(x.cols());
  monoInput <<= x.row(0);
  for (index i = 1; i < x.rows(); ++i)
    monoInput.apply(x.row(i), [](double& x, double y) { x += y; });
  return monoInput;
}

FluidTensor<double, 1> make_oneImpulse()
{
  FluidTensor<double, 1> oneImpulse(fs);
  std::fill(oneImpulse.begin(), oneImpulse.end(), 0);
  oneImpulse[(fs / 2) - 1] = 1.0;
  return oneImpulse;
}

std::vector<index> stereoImpulsePositions()
{
  return {1000, 12025, 23051, 34076}; 
}

FluidTensor<double, 2> make_stereoImpulses()
{
  FluidTensor<double, 2> impulses(2, fs);
  impulses.fill(0);
  // 1000.0, 12025.0, 23051.0, 34076.0
  impulses.row(0)[1000] = 1;
  impulses.row(0)[23051] = 1;

  impulses.row(1)[12025] = 1;
  impulses.row(1)[34076] = 1;
  return impulses;
}

FluidTensor<double, 1> make_sharpSines()
{
  FluidTensor<double, 1> sharpSines(fs);
  std::generate(sharpSines.begin() + 1000, sharpSines.end(),
                [i = 1000]() mutable {
                  constexpr double freq = 640;
                  double           sinx = sin(2 * M_PI * i * freq / (fs - 1));
                  constexpr double nPeriods = 4;
                  double           phasor =
                      (((fs - 1 - i) % index(fs / nPeriods)) / (fs / nPeriods));
                  i++;
                  return sinx * phasor;
                });
  return sharpSines;
}

FluidTensor<double, 1> make_smoothSine()
{
  FluidTensor<double, 1> smoothSine(fs);
  std::generate(smoothSine.begin(), smoothSine.end(), [i = 0]() mutable {
    double res = sin(2 * M_PI * 320 * i / fs) * fabs(sin(2 * M_PI * i / fs));
    i++;
    return res;
  });
  return smoothSine;
}

FluidTensor<double, 2> load(const std::string& audio_path,
                            const std::string& file)
{
  HISSTools::IAudioFile f(audio_path + "/" + file);
  auto                  e = f.getErrors();
  if (e.size())
  {
    throw std::runtime_error(HISSTools::BaseAudioFile::getErrorString(e[0]));
  }

  FluidTensor<double, 2> data(f.getChannels(), f.getFrames());
  f.readInterleaved(data.data(), f.getFrames());
  e = f.getErrors();
  if (e.size())
  {
    throw std::runtime_error(HISSTools::BaseAudioFile::getErrorString(e[0]));
  }

  return data;
}

FluidTensor<double, 1>& oneImpulse()
{
  static auto resource = make_oneImpulse();
  return resource;
}

FluidTensor<double, 2>& stereoImpulses()
{
  static auto resource = make_stereoImpulses();
  return resource;
}

FluidTensor<double, 1>& sharpSines()
{
  static auto resource = make_sharpSines(); 
  return resource;
}

FluidTensor<double, 1>& smoothSine()
{
  static auto resource = make_smoothSine();
  return resource;
}

FluidTensor<double, 2>& guitarStrums()
{
  static auto resource = load(audio_path,"Tremblay-AaS-AcousticStrums-M.wav"); 
  return resource;
}

FluidTensor<double, 2>& eurorackSynth()
{
  static auto resource = load(audio_path,"Tremblay-AaS-SynthTwoVoices-M.wav"); 
  return resource; 
}

FluidTensor<double, 1>& monoEurorackSynth()
{
  static auto resource = mono(eurorackSynth()); 
  return resource; 
}

FluidTensor<double, 2>& drums()
{
  static auto resource = load(audio_path,"Nicol-LoopE-M.wav"); 
  return resource; 
}

FluidTensor<double, 1>& monoDrums()
{
  static auto resource = mono(drums()); 
  return resource; 
}

FluidTensor<double, 1>& monoImpulses()
{
  static auto resource = mono(stereoImpulses()); 
  return resource; 
}


} // namespace testsignals
} // namespace fluid
